Dynamo DB

- Fast and flexible nosql db. consistent, single digit ms latency at any scale 
- Fully managed - supports key-value data models. supported doc formats are json, html and xml 
- Serverless - Integrates well with lambda. Good for Serverless apps 
- Stored on SSD storage. enhances performance 
- Resilience . Spread across 3 geographically distinct data centres 
- Consistency - eventually consistent reads (default). strongly consistent reads 

eventually consistent reads 
- Consistency across all copies of data usually reached within a asecond. best for read performance 

strongly consistent reads 
- reflects all successfull writes. writes are reflected across all 3 locs at once. best for read consistentcy

ACID transactions 
- provide ability to perform ACID (Atomic, consistent, Isolated, Durable)

DynamoDB Primary key
- primary key. stores and retrieves data based on primary key 
- two type. - partition key and composite key (partition key + sort key )

partition key - 
- unique attribute (customer_id ). value of partition key is input to internal hash func which determines the partition or physical loc on which the data is stored .
- if using partition key as primary key, no two keys are allowed the same values 

composite key 
- partition key + sort key 
- partition key not unique in table (e..g forum posts )
- Unique combination - items in table may have same partiriton key but ehy must have different sort key 
- storage - all items with same partition key are stored together and then sorted according to the sort key value .


Primary key -> Hash key 

Dynamo DB Control Access 
- Using IAM . Auth and access managed thru AWS IAM 
- IAM Perms - can create iam users within aws acct with specific perms to access and create dynamodb tables 
- IAM roles - can create iam roles enabling temp acccess to dynamodb

Restricting user access 
- special iam condition to restrict user access to only their own records
- condition to an iam policy to allow acces sonly to items where partition key value matches user_id-
- dynamodb:LeadingKeys - allows users to access only items where partition key value matches user id 

Secondary Index 
- flexible Querying  - Query based on an attribute that is not the primary key 
- Dynamdodb allows to run query on non-priary key attrivutes using global secondary indexes and local secondary indexes

- secondary index allows to perform fast queries on specific columns in a table. select columns that are wanted in the index and run searches on the index rather than on entire dataset

Local Secondary index 
- primary key - same partition key as orgiinal table but different sort key 
- gives different view of data, organized accroding to alternative sort key 
- faster queries - any queries based on this sort key are much faster using index than main table 
- example - partition key - user id and sort key - acct creation date
- Add at creation time - can only be created when creating the table. cannot add, remove, modify later 

Global secondary index 
- completely different primary key (different partition key and sort key)
- view data differently - gives completely different view of data 
- speeds up queries 
- partition key - email , sort key - last log in date 
- flexible - can create when table is created or add it later 

Scan and Query API calls 

- Query - Finds items in table based on primary key attribute and distinct value to search for 
- Refine query using optional sort key name value to refine results 
- by default query returns all attributes for items you select but can use ProjectionExpression parameter if needed 

- Sort Key - results always sorted by sort key 
- Numeric Order - Ascending numeric order by default 
- ASCII - character code values 
- Reverse the order - use the setting ScanIndexForward parameter to false 
- eventually consistent - by default queries are eventually consistent
- strongly consistent - need to explicitly set query to be strongly consistent

- Scan - scan operation examines every item in the table. by default , it return all data attributes. use ProjectionExpression parameter if needed 

Query or scan 
- Query much more efficient than scan. scan dumps entire table and then filters out. 
- extra step in scan 
- scan on large table affects provisioned througput 

Improve Query or scan performance 
- set smaller page size (set page items to 40)
- runnign large number of smaller operation will allow other requests to succeed without throttling
- avoid scans
- Parallel scans can be used - 
- regular partition - one partition at a time. Parallel will scan logically divided segment 
- Avoid parallel scans if db is under heavy stress 
- isloate scan operations to specific table and segregate them from mission-critical traffic . evan if it means writing to 2 different tables


Provisioned Throughput 
- Measeured in capacity units 
- specify requirements - can specify requirements in terms of read and write capacity unites 
- 1 write capacity unit = 1 * 1KB write per second 
- 1 read capacity unit - 1 strongly consistent read of 4kb per second or 2 x eventually consistent reads of 4kb per second (default)
 
DynamoDB on Demand capacity

- Pricing model for dynamo db - charges apply for reading, writing and storing data- dynamdodb instantly scales up and down based on activity of app 
- great for unpredictable workloads, new apps, pay for only what you use 
- On demand capacity to be used for unknown workload, unpredictable app traffic, spiky short lived peaks, pay per use model is desired, might be difficult to predict the cost 
- Provisioned capacity - Read and write capacity requirmeents can be forecasted, predctible app traffiiic, app traffic is consistent or gradual, more control on dynamo db cost 
