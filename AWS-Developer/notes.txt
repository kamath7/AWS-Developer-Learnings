CI/CD 

- SW dev best practice 
- CI - Continuous Integration and CD - Delivery/Deployment 
- Make small changes and automate everything
- Automation good , manual bad 
- small changes and easy to catch bugs to fix 
- Shared code repo - multiple devs contributing to code
- Automated build - changes appear in code repo- 
- automated test - testing done 
- Code merged, prepared for deployment, manual descision or fully automated 
- Code Commit - Source control service enabling teams to collaborate on code, scripts etc 
- Code Build - Compiles code, runs tests and produces packages ready to deploy 
- Code Deploy - automates code deployments to any instance - EC2, lambda 
- Code Pipeline  - End to end sol, build, test and deploy app every time there is a change 
AWS Whitepaper - Practice CI&CD on AWS. 

Code Commit 
- Central code repo to store source code, binaries, images, libraries 
- manages updates from multiple sources. allows collaboration and maintains version history 


Code Deploy -

- Automated deployment service. Works with EC2 instances, on-premises and lambda 
- Quickly release new features 
- Two deployment approaches - in place and blue/green
- In place - application stopped on each instance and new release is installed. also known as rolling update
- Blue/Green - new instances provisioned and new release is installed on new instances. blue represent active deployment and green is new release 

- Codedeploy installs new version known as revision 
- instance comes back into service 
- codedeploy continues to deploy to next instance 

- Rollback - No quick fix. with in place, need to redeploy previous version which canbe time consuming 
- Blue green - green instances are registered with ELB - Elastic Load Balancer and traffic is routed away from old env . blue is everntually terminated 

-Rollback for BG - Set load balancer to redirect traffic to older env 

 BG vs In Place 
 IN place - Capacity reduced during deployment, Lambda not supported, rolling back involves re-deploy , great when deploying first time 
 Blue/Green - No capacity reduction, green instances created ahead of time, easy to switch between old and new, pay for 2 envs until old servers terminated 

 Blue/green - safest option for Prod env 

 AppSpec File 
 - Config file - Defines parameters to be used during CodeDeploy depoloyment 
 - EC2 - for ec2 and on-premises systems, yaml only 
 = lambda - yaml and json supported. file structure depends on  whether you are deploying to lambda or ec2 
 - 4 parts 
 - version - currently allowed value is 0.0 
 - OS - operating system version. either linux or windows 
 - files - config files or packages. location of any app files that need to copied or where theys hould be copied to 
 - hook - scripts that run at set points in deployments lifecycle. hoks have specific run order 

Scripts run during deployment 
- unzip files - unzip prior to deployment 
- run tests - run functional tests on newly deployed app 
- deal with load balancing - de-register and re-register instances with load balancer 

Typical folder setup 
- must be placed in root of folder - appspec.yml /scripts /config /source 

Code Deploy - life cycle event hooks 
- Hooks are run in specific order known as run order 
- Phase 1 - De register instances from load balancer 
- Phase 2 - nuts and bolts of application deployment 
- Phase 3 - Re -register instances with load balancer 

Types of hooks 
- Before hook - tasks to be run on instances before they are de-registered from load balancer 
- Block - De-register instances from Load Balancer 
- After tasks you want to run on instances after they are de registered from Load Balancer 
Run order -
- Application Stop - Gracefully stop the application
= Download bundle - Codedeploy agent copies application revision files to temporary location 
- Before Install - pre installation scripts. backing up crurent ver, decrypring files 
- Install - copy app files to final location 
- After install - Post-install script. eg config, file permissions 
- ApplicationStart: start any services stopped during applicationstop 
- ValidateService - Run tests to validate service 
- BeforeAllowTraffic - Tasks you want to run on instances before they're registered with load balancer 
- AllowTraffic - Register instances with load balancer 
- After - Tasks you want to run on instances after they are registered with Load Balancer 


Code Pipeline 

- Fully managed CI/CD service 
- Orchestrates build, test & deployment 
- Automated Release process - Fast, consistent. enables quick release of new features and bug fixes 
- CodePipeline integrates with other CodeCommit, CodeBuild, GitHub, Jenkins, Elastic Beanstalk 
- Process - Workflow defined, New Code Appears, Code is Built and Tested, Application Deployed

Microservices

- Traditional - Monolithic - Difficult to change.
- Architectural and organizational approach to software dev where software made up of smaller components
- many services are made up of microservices running in containers
- Advantages - Serviceability, Flexibility, Scalability 
- If one component breaks - not a problem, quick to fix

Elastic Container Service 
- Able to run containerised workloads on AWS 
- Container - Similar to VM, more like virtual OS. Standardised unit with everything software needs to run. Apps are created using independent stateless component running in containers . Docker to create linux containers
- Container contains code, libraries and virtual kernel which runs on Docker. as app scales, can add more and more containers 
- Advantages - highly scalable (scale only services), easy to build fault tolerant services, Easy to maintain than large monolithic apps 
- ECS - Container orchestration service which support docker. Similar to Kubernetes. Advantage is integration with IAm, Route 53 
- Choice to run on Clusters of Virtual Machines or Fargate for Serverless. EC2 to be used for more control 
- Create ECR (elastic container registry ). 
- Services and ECS - Amazon Sagemaker, Amazon Lex, amazon.com

Docker & ECS 

- CodeCommit - Dockerfile uploaded with buildspec.yaml
= CodeBuild - Docker image generated and Docker image stored in ECR 
- Docker command to build, tag and push docker image to ECR 

docker build -t myimagerepo
docker tag myimagerepo:latest 1122.us-east-1.amazonaws.com/myimagerepo:latest 
docker push 1122.us-east-1.amazonaws.com/myimagerepo:latest 

-buildspec.yml to define build command and setting used by CodeBuild to run build 

Docker and Elastic Bean Stalk 
- ELB supports deployment of docker containers 
- elb handles capacity provisioning, load balancing etc. 
- Single Docker Container on EC2 instance or can use Multiple Docker container. ELB will build ECS cluster 
- upload zip file containing code bundle and elb will do the rest 
- upgrade app to new version, easy to do in the console 


CloudFormation 
- Manage, configure and provision aws infra as code. Defined using CloudFormation tempalte. Template supports YAML or JSON 
- Consistent, quick and efficient, version control, free to use and manage updates, rolling back 
- Uses YAML/JSON template, can upload to CloudFormation using S3, Reads template and makes API calls, resulting resources from template is called stack 
- Can provision resources based on env
- can input custom values 
- Can create custom mapping like region 
- allows to reference code located in S3. Lambda code or reusable snippets of CF code 

Serverless Application Model (SAM)

- SAm - extension to CloudFormation used to define serverless applications 
- Simplified syntax - 
- SAM CLI - to package deployment code, upload to s3 and deploy serverless apps 

SAM Commands 
sam package --template-file ./mmm.yml --output-template-file sam-template.yml --s3-bucket s3-bucket-name

sam deploy --template-file .mm.yml --stack-name mystack --capabilities CAPABILITY_IAM

Cloud Formation Nested stacks 
- enables reuse of CloudFormation code for common use cases. Standard config for lb, web server etc 
- Defined within the resources section