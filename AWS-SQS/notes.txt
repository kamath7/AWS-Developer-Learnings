AWS SQS

- One of the oldest services from AWS 
- Message queue service
- Enables web service apps to quickly queue messages that one components generate and anopther consumes 
- temporary repo for messages awaiting processing
- Visibility timeout - time for app server to process the message 
- removes dependencies upon individual components. Decoupling infrastructure 
- Queue resolves issue that arise if procuder is producing work faster than the consumer can process it or if producer or consumer are only intermittently connected to netwrok
- SQS - Pull based not push based, 
- 256 kb in size messages
- text data including xml, json and unformatted text
- guarantess messages will be processed atleast once 
- upto 14 days messages can be kept in queue from one min to 14 days 
- default retention period - 4 days 

SQS queue types 
- 2 types of queues - Standard queue, FIFO queue 
- standard queue - default which provides best-effort ordering 
- fifo - first in first out. order is strictly preserved 

Standard Queue 
- nearly unlimited no of transactions per second
-  guarantess message is delivered atleast once 
- best effort ordering which ensures messages delivered in same order they are sent 

FIFO Queue 
- order in which messages are sent and received strictly preserved
- message is delivered once and remains available until consumer processes and deletes it. duplicates not introduced 
- fifo queues are limited to 300 transactions per second but have all capabilities of standard queues
-good for banking transactions which need to happen in strict manner 

SQS settings 
- Visibility timeout - amount of time that message is invisible in sqs queue after reader picks up that message. default timeout 30 secs 
-  if job not processed within that time, message will become visible again and another reader will process it 
- max Visibility timeout is 12 hrs 
- Short polling - returns response immediately even if message queue being polled is empty. can result in lot of empty responses if nothing in queue. will have to pay for these resources
- Long Polling  - periodically polls the queue, doesn't return response until message arrives in message queue or long poll times out, can save money, long polling is generally preferred over short polling 

SQS delay queues
- postponse delivery of new messages to queue for number of seconds 
- mmessage sent to delay queue remain invisible to consumers for duration of delay period 
- default delay is 0 seconds, max is 900 
- for standard queues, changing setting no affect the delay of msgs already in queue only new message 
- fifo queue - affects delay of messages already in queue 
- delay queue only to be used when 
a) large distributed apps which may need to introduce delay in processing
b) need to apply delay to entire queue of messages

Best practice for managing large sqs messages using s3 
- for large sqs messages - 256 kb upto 2gb in size 
- use s3 to store the messages 
- need to use AMAZON sqs extended client library for java to manage them 
- need the aws sdk for java - provides api for s3 bucket and object operations 
-  AMAZON sqs extended client library for java  allows to 
a) specify messages are always stored in amazon s3 or only messages > 256 kb 
b) send message which references a message object stored in s3 
c) get message object from s3 
d) delete message object from s3 

SNS  
- Simple Notification Service 
- service to setup, operate and send notifications from the cloud 
- messages sent from app can be immediately delivered to subscribers or other apps 
- Push notifications - to devices such as ios, android , sms and email (can send to SQS also), trigger lambda function to process info in the msg, publish to another sns topic, or send msg to another aws service 
- pub and sub model - application publish or push messages to topic. subscribers receive messages from topic 
- notifications delivered using push mechanism. eleminates need to periodically check or poll for new info and updates 
- topic - access point, allowing recipients to subscribe to and receive identical copies of same Notification. sns delivers appropriately-formatted copies of the message to each subscriber 
- Durability  - durable storage, prevents messages from being lost . all messages published to sns are stored redundantly across multiple azs 
- benefits - instantaneous, simple to setup and use , flexible, inexpensive, easy to configure, managed service 
- SNS - messaging service, sns is push based and are basically push notifications 
- SQS - messaging service, sqs is pull based (held in  a queue), think polling the queue for messages 

SES 
- Simple email service 
- Scalable and highly available email service . pay as you go model 
- send and receive email . incoming email to s3 bucket 
- incoming email to trigger lambda and sns 
- Can use ses to - send automated emails (new post in some form), purchase confirmations, marketing emails (ads)
- ses - email messaging service, can trigger lambda func , can be used for both incoming and outgoing email , email address is required for sending msgs 
- sns - pub/sub messaging service, can trigger lambda func, can fanout message to large number of recipient

Elastic Beanstalk 
- Deploy and scale web apps. 
-supported langs - java, .net, node js , python 
- supported platforms - apache, http server, tomcat
- focus on writing code and don't worry about infra to run apps 
- handles infra (load balancer, ec2 instances), app platform maintenance , you are in control 

Updating EB 
- All at once - deploys to all hosts concurrently 
- Rolling updates - deploys new versions in batches 
- Rolling with Additional Batch - launches an additional batch of isntances then deploys new version in batches
- Immutable - deployes new version to fresh group of instances before deleting old instances 
- Traffic splitting  - install new version on new set of instances like immutable deployment. some traffic to old version and some to new version 

Which approach to choose?
- All at once - will experience total outage. not ideal for mission-critical production systems. if update fails, rollback changes by re-deploying. another outage during deployment. only time to use is during development or test env not for prod env 
- Rolling deployment - deployed in batches. batch taken out of service while deployment takes place. env capacity will be reduced by no of instances in batch while deployment takes place. not ideal for performance sensitive systems. if update fails, rollback to be performed 
- additional batch - laucnhes additional batch. deploys new version. maintains full capacity 
- Immutable deployment - launched into fresh group of instances. only when new instances health check pass, old instances are to be terminated. preferred method. 

Traffic splitting - Enables Canary testing 
- installs new version on new set of isntances just like immutable deployment 
- forwards percentage of incoming client traffic to new app version for specified evaluation period 

EB Config files 
- Config - define packages to install, create linux users and groups, run shell commands
- Files written in YAML or JSON 
- file must have a .config extension and be inside a folder called .ebextensions 
- .ebextensions folder must be included in top-level directory of app source code bundle 
- config files can be placed under source control along with rest of code 


RDS with EB 
- 2 ways of integrating RDS DB into EB .
- can integrate inside EB or outside EB 
- launch rds instance from within the elastic Beanstalk console if env terminated, db also terminated 
- launch rds instance out of eb. use rds console or aws cli. can terminate app env without affecting db instance . preferred approach for prod systems
- For connecting to external DB - additional sg must be added to env's sg. provide connection string info to app servers using EB env properties.

AWS Kinesis 

- Family of services to collect , process and analyse streaming data in real time. allows to build custom apps for business needs 
- streaming data - data generated continously by many data sources which send data records simultaneously and in small sizes. - financial transactions, location tracking data, game data 

Kinesis streams - stream data and vids to allow to build custom apps that process data in real time 
Kinesis data firehose - capture, transform, load data streams into aws data stores to enable near real time analytics with BI tools 
Kinesis Data analytics - Analyse, query and transsform streamed data in real0time using standard sql and store results in aws data store 

Kinesis streams - 24 hours- 7 day retention. stored in shards. Consumers can be ec2 instances, lambdas etc   
Kinesis Shards - streams are made of shards, each shard is sequence of one more data records and provides fixed unit of capacity, five read per second and max total read rate is 2mb per second, 1000 writes per second, max total write rate is 1mb per second 
Data capacity of stream is determined by no of shards. if data rate increases, no of shards increases

Kinesis video streams - securely stream video from connected devices to aws. Videos can be used for analytics and machine learning 

Kinesis Data firehose - No data retention. upon receiving data, either picked up lambda and processed or stored in s3 or elastisearch 
-Realtime analytics - Kinesis data analytics


